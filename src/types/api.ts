/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/categorias/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        get: operations["categorias_list"];
        put?: never;
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        post: operations["categorias_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categorias/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        get: operations["categorias_retrieve"];
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        put: operations["categorias_update"];
        post?: never;
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        delete: operations["categorias_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar las Categorías de los torneos.
         *
         *     Una categoría representa una división dentro del torneo, como 'Sub-12', 'Senior', etc. */
        patch: operations["categorias_partial_update"];
        trace?: never;
    };
    "/api/equipos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todos los equipos (con logging) */
        get: operations["equipos_list"];
        put?: never;
        /** @description Crea un nuevo equipo (con logging) */
        post: operations["equipos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/equipos/por_categoria/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar equipos por categoría.
         *
         *     Parámetros:
         *     - categoria_id: ID de la categoría para filtrar los equipos
         *
         *     Retorna:
         *     - Lista de equipos que pertenecen a la categoría especificada */
        get: operations["equipos_por_categoria_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/equipos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene un equipo específico (con logging) */
        get: operations["equipos_retrieve"];
        /** @description Actualiza un equipo (con logging) */
        put: operations["equipos_update"];
        post?: never;
        /** @description API endpoint para gestionar los Equipos participantes en los torneos.
         *
         *     Un equipo pertenece a una categoría y tiene múltiples jugadores. */
        delete: operations["equipos_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar los Equipos participantes en los torneos.
         *
         *     Un equipo pertenece a una categoría y tiene múltiples jugadores. */
        patch: operations["equipos_partial_update"];
        trace?: never;
    };
    "/api/jugadores/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todos los jugadores (con logging) */
        get: operations["jugadores_list"];
        put?: never;
        /** @description API endpoint para gestionar los Jugadores de los equipos.
         *
         *     Un jugador pertenece a un equipo y tiene estadísticas asociadas. */
        post: operations["jugadores_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jugadores/goleadores/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtener lista de jugadores con sus estadísticas de goles.
         *
         *     Retorna:
         *     - Lista de jugadores ordenados por la cantidad de goles marcados (descendente)
         *     - Soporta paginación a través de los parámetros estándar de DRF (page, page_size) */
        get: operations["jugadores_goleadores_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jugadores/por_equipo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar jugadores por equipo.
         *
         *     Parámetros:
         *     - equipo_id: ID del equipo para filtrar los jugadores
         *
         *     Retorna:
         *     - Lista de jugadores que pertenecen al equipo especificado */
        get: operations["jugadores_por_equipo_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jugadores/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene un jugador específico (con logging) */
        get: operations["jugadores_retrieve"];
        /** @description API endpoint para gestionar los Jugadores de los equipos.
         *
         *     Un jugador pertenece a un equipo y tiene estadísticas asociadas. */
        put: operations["jugadores_update"];
        post?: never;
        /** @description API endpoint para gestionar los Jugadores de los equipos.
         *
         *     Un jugador pertenece a un equipo y tiene estadísticas asociadas. */
        delete: operations["jugadores_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar los Jugadores de los equipos.
         *
         *     Un jugador pertenece a un equipo y tiene estadísticas asociadas. */
        patch: operations["jugadores_partial_update"];
        trace?: never;
    };
    "/api/jornadas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todas las jornadas (con logging) */
        get: operations["jornadas_list"];
        put?: never;
        /** @description API endpoint para gestionar las Jornadas de los torneos.
         *
         *     Una jornada agrupa varios partidos dentro de un torneo. */
        post: operations["jornadas_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jornadas/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene una jornada específica (con logging) */
        get: operations["jornadas_retrieve"];
        /** @description API endpoint para gestionar las Jornadas de los torneos.
         *
         *     Una jornada agrupa varios partidos dentro de un torneo. */
        put: operations["jornadas_update"];
        post?: never;
        /** @description API endpoint para gestionar las Jornadas de los torneos.
         *
         *     Una jornada agrupa varios partidos dentro de un torneo. */
        delete: operations["jornadas_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar las Jornadas de los torneos.
         *
         *     Una jornada agrupa varios partidos dentro de un torneo. */
        patch: operations["jornadas_partial_update"];
        trace?: never;
    };
    "/api/jornadas/{id}/partidos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtener los partidos de una jornada específica.
         *
         *     Retorna:
         *     - Lista de partidos de la jornada ordenados por fecha. */
        get: operations["jornadas_partidos_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partidos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todos los partidos (con logging) */
        get: operations["partidos_list"];
        put?: never;
        /** @description API endpoint para gestionar los Partidos de los torneos.
         *
         *     Un partido se juega entre dos equipos, pertenece a una jornada y tiene registros
         *     asociados como goles y tarjetas. */
        post: operations["partidos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partidos/por_equipo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar partidos por equipo.
         *
         *     Parámetros:
         *     - equipo_id: ID del equipo para filtrar los partidos
         *
         *     Retorna:
         *     - Lista de partidos donde el equipo ha participado, ordenados por fecha */
        get: operations["partidos_por_equipo_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partidos/por_jornada/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar partidos por jornada.
         *
         *     Parámetros:
         *     - jornada_id: ID de la jornada para filtrar los partidos
         *
         *     Retorna:
         *     - Lista de partidos de la jornada especificada ordenados por fecha */
        get: operations["partidos_por_jornada_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partidos/proximos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtener partidos próximos a disputarse.
         *
         *     Parámetros de filtrado:
         *     - torneo_id: (opcional) Filtra partidos por torneo
         *     - equipo_id: (opcional) Filtra partidos donde participa un equipo específico
         *     - dias: (opcional) Número de días hacia adelante para limitar la búsqueda (default: 7)
         *
         *     Retorna:
         *     - Lista de partidos próximos ordenados por fecha */
        get: operations["partidos_proximos_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partidos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene un partido específico (con logging) */
        get: operations["partidos_retrieve"];
        /** @description API endpoint para gestionar los Partidos de los torneos.
         *
         *     Un partido se juega entre dos equipos, pertenece a una jornada y tiene registros
         *     asociados como goles y tarjetas. */
        put: operations["partidos_update"];
        post?: never;
        /** @description API endpoint para gestionar los Partidos de los torneos.
         *
         *     Un partido se juega entre dos equipos, pertenece a una jornada y tiene registros
         *     asociados como goles y tarjetas. */
        delete: operations["partidos_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar los Partidos de los torneos.
         *
         *     Un partido se juega entre dos equipos, pertenece a una jornada y tiene registros
         *     asociados como goles y tarjetas. */
        patch: operations["partidos_partial_update"];
        trace?: never;
    };
    "/api/goles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todos los goles (con logging y métricas de rendimiento) */
        get: operations["goles_list"];
        put?: never;
        /** @description Crea un nuevo gol con protección de transacción */
        post: operations["goles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/goles/por_partido/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar goles por partido.
         *
         *     Parámetros:
         *     - partido_id: ID del partido para filtrar los goles
         *
         *     Retorna:
         *     - Lista de goles marcados en el partido especificado */
        get: operations["goles_por_partido_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/goles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene un gol específico (con logging) */
        get: operations["goles_retrieve"];
        /** @description Actualiza un gol con protección de transacción */
        put: operations["goles_update"];
        post?: never;
        /** @description Elimina un gol con protección de transacción */
        delete: operations["goles_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar los Goles marcados en los partidos.
         *
         *     Un gol es anotado por un jugador en un partido específico. */
        patch: operations["goles_partial_update"];
        trace?: never;
    };
    "/api/tarjetas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lista todas las tarjetas (con logging) */
        get: operations["tarjetas_list"];
        put?: never;
        /** @description API endpoint para gestionar las Tarjetas (amarillas y rojas) mostradas en los partidos.
         *
         *     Una tarjeta es mostrada a un jugador en un partido específico. */
        post: operations["tarjetas_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tarjetas/por_tipo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtrar tarjetas por tipo (AMARILLA o ROJA).
         *
         *     Parámetros:
         *     - tipo: Tipo de tarjeta (AMARILLA o ROJA)
         *
         *     Retorna:
         *     - Lista de tarjetas del tipo especificado */
        get: operations["tarjetas_por_tipo_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tarjetas/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtiene una tarjeta específica (con logging) */
        get: operations["tarjetas_retrieve"];
        /** @description API endpoint para gestionar las Tarjetas (amarillas y rojas) mostradas en los partidos.
         *
         *     Una tarjeta es mostrada a un jugador en un partido específico. */
        put: operations["tarjetas_update"];
        post?: never;
        /** @description API endpoint para gestionar las Tarjetas (amarillas y rojas) mostradas en los partidos.
         *
         *     Una tarjeta es mostrada a un jugador en un partido específico. */
        delete: operations["tarjetas_destroy"];
        options?: never;
        head?: never;
        /** @description API endpoint para gestionar las Tarjetas (amarillas y rojas) mostradas en los partidos.
         *
         *     Una tarjeta es mostrada a un jugador en un partido específico. */
        patch: operations["tarjetas_partial_update"];
        trace?: never;
    };
    "/api/torneos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar todos los torneos
         * @description Retorna una lista paginada de todos los torneos en el sistema.
         */
        get: operations["torneos_list"];
        put?: never;
        /**
         * Crear un nuevo torneo
         * @description Crea un nuevo torneo con los datos proporcionados.
         */
        post: operations["torneos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torneos/activos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar torneos activos
         * @description Obtiene una lista de torneos que están actualmente en curso (fecha actual entre fecha_inicio y fecha_fin).
         */
        get: operations["torneos_activos_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torneos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener detalle de un torneo
         * @description Retorna información detallada de un torneo específico.
         */
        get: operations["torneos_retrieve"];
        /**
         * Actualizar un torneo completo
         * @description Actualiza todos los campos de un torneo existente.
         */
        put: operations["torneos_update"];
        post?: never;
        /**
         * Eliminar un torneo
         * @description Elimina un torneo existente del sistema.
         */
        delete: operations["torneos_destroy"];
        options?: never;
        head?: never;
        /**
         * Actualizar parcialmente un torneo
         * @description Actualiza solo los campos proporcionados de un torneo existente.
         */
        patch: operations["torneos_partial_update"];
        trace?: never;
    };
    "/api/torneos/{id}/estadisticas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener estadísticas generales del torneo
         * @description Obtiene estadísticas detalladas del torneo, incluyendo total de equipos, partidos, goles, tarjetas y más.
         */
        get: operations["torneos_estadisticas_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torneos/{id}/jugadores_destacados/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener jugadores destacados del torneo
         * @description Obtiene lista de goleadores, jugadores con tarjetas amarillas y jugadores con tarjetas rojas.
         */
        get: operations["torneos_jugadores_destacados_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torneos/{id}/tabla_posiciones/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener tabla de posiciones
         * @description Obtiene la tabla de posiciones actual del torneo, con estadísticas de cada equipo.
         */
        get: operations["torneos_tabla_posiciones_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Obtiene un par de tokens JWT (access y refresh) tras la autenticación.
         *
         *     Parámetros requeridos en el body:
         *     - username: nombre de usuario
         *     - password: contraseña
         *
         *     Retorna:
         *     - access: Token JWT de acceso (corta duración)
         *     - refresh: Token JWT de refresco (larga duración)
         *     - user_id: ID del usuario autenticado
         *     - email: Correo del usuario (si existe)
         *     - is_staff: Indica si el usuario es staff o no */
        post: operations["auth_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/registro/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Registra un nuevo usuario y devuelve sus tokens JWT.
         *
         *     Parámetros requeridos en el body:
         *     - username: nombre de usuario único
         *     - password: contraseña
         *     - email: correo electrónico (opcional)
         *
         *     Retorna:
         *     - access: Token JWT de acceso
         *     - refresh: Token JWT de refresco
         *     - user_id: ID del usuario creado
         *     - email: Correo del usuario */
        post: operations["auth_registro_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {unknown} */
        BlankEnum: "";
        Categoria: {
            readonly id: number;
            nombre: string;
            descripcion?: string;
            /** Format: decimal */
            premio_primero?: string | null;
            /** Format: decimal */
            premio_segundo?: string | null;
            /** Format: decimal */
            premio_tercero?: string | null;
            /** Format: decimal */
            premio_cuarto?: string | null;
            /** Format: decimal */
            costo_inscripcion?: string | null;
            /** Format: decimal */
            costo_arbitraje?: string;
            /** Format: decimal */
            multa_amarilla?: string;
            /** Format: decimal */
            multa_roja?: string;
            limite_inasistencias?: number;
            limite_amarillas_suspension?: number;
            partidos_suspension_roja?: number;
        };
        CategoriaRequest: {
            nombre: string;
            descripcion?: string;
            /** Format: decimal */
            premio_primero?: string | null;
            /** Format: decimal */
            premio_segundo?: string | null;
            /** Format: decimal */
            premio_tercero?: string | null;
            /** Format: decimal */
            premio_cuarto?: string | null;
            /** Format: decimal */
            costo_inscripcion?: string | null;
            /** Format: decimal */
            costo_arbitraje?: string;
            /** Format: decimal */
            multa_amarilla?: string;
            /** Format: decimal */
            multa_roja?: string;
            limite_inasistencias?: number;
            limite_amarillas_suspension?: number;
            partidos_suspension_roja?: number;
        };
        Equipo: {
            readonly id: number;
            readonly categoria_nombre: string;
            nombre: string;
            /** Format: uri */
            logo?: string | null;
            color_principal?: string;
            color_secundario?: string;
            nivel?: components["schemas"]["NivelEnum"];
            /** Format: date-time */
            readonly fecha_registro: string;
            activo?: boolean;
            estado?: components["schemas"]["EstadoEnum"];
            /** Format: date-time */
            fecha_retiro?: string | null;
            grupo?: components["schemas"]["GrupoEnum"] | components["schemas"]["BlankEnum"];
            inasistencias?: number;
            excluido_por_inasistencias?: boolean;
            clasificado_fase_grupos?: boolean;
            fase_actual?: string;
            eliminado_en_fase?: string;
            categoria: number;
            torneo: number;
            dirigente?: number | null;
        };
        EquipoDetalle: {
            readonly id: number;
            readonly categoria: components["schemas"]["Categoria"];
            readonly jugadores: components["schemas"]["Jugador"][];
            nombre: string;
            /** Format: uri */
            logo?: string | null;
            color_principal?: string;
            color_secundario?: string;
            nivel?: components["schemas"]["NivelEnum"];
            /** Format: date-time */
            readonly fecha_registro: string;
            activo?: boolean;
            estado?: components["schemas"]["EstadoEnum"];
            /** Format: date-time */
            fecha_retiro?: string | null;
            grupo?: components["schemas"]["GrupoEnum"] | components["schemas"]["BlankEnum"];
            inasistencias?: number;
            excluido_por_inasistencias?: boolean;
            clasificado_fase_grupos?: boolean;
            fase_actual?: string;
            eliminado_en_fase?: string;
            torneo: number;
            dirigente?: number | null;
        };
        EquipoRequest: {
            nombre: string;
            /** Format: binary */
            logo?: string | null;
            color_principal?: string;
            color_secundario?: string;
            nivel?: components["schemas"]["NivelEnum"];
            activo?: boolean;
            estado?: components["schemas"]["EstadoEnum"];
            /** Format: date-time */
            fecha_retiro?: string | null;
            grupo?: components["schemas"]["GrupoEnum"] | components["schemas"]["BlankEnum"];
            inasistencias?: number;
            excluido_por_inasistencias?: boolean;
            clasificado_fase_grupos?: boolean;
            fase_actual?: string;
            eliminado_en_fase?: string;
            categoria: number;
            torneo: number;
            dirigente?: number | null;
        };
        EstadisticaEquipo: {
            readonly id: number;
            readonly equipo: number;
            readonly equipo_nombre: string;
            readonly torneo: number;
            readonly grupo: components["schemas"]["GrupoEnum"] | components["schemas"]["BlankEnum"];
            readonly puntos: number;
            readonly partidos_jugados: number;
            readonly partidos_ganados: number;
            readonly partidos_empatados: number;
            readonly partidos_perdidos: number;
            readonly goles_favor: number;
            readonly goles_contra: number;
            readonly diferencia_goles: number;
            readonly tarjetas_amarillas: number;
            readonly tarjetas_rojas: number;
        };
        /**
         * @description * `activo` - Activo
         *     * `retirado` - Retirado
         *     * `suspendido` - Suspendido
         * @enum {string}
         */
        EstadoEnum: "activo" | "retirado" | "suspendido";
        /**
         * @description * `inscripcion` - Inscripción
         *     * `grupos` - Fase de Grupos
         *     * `octavos` - Octavos de Final
         *     * `cuartos` - Cuartos de Final
         *     * `semifinales` - Semifinales
         *     * `final` - Final
         *     * `finalizado` - Finalizado
         * @enum {string}
         */
        FaseActualEnum: "inscripcion" | "grupos" | "octavos" | "cuartos" | "semifinales" | "final" | "finalizado";
        Gol: {
            readonly id: number;
            readonly jugador_nombre: string;
            readonly partido_descripcion: string;
            readonly equipo_nombre: string;
            readonly torneo_nombre: string;
            readonly fecha_partido: string;
            /** Minuto (opcional) */
            minuto?: number | null;
            autogol?: boolean;
            jugador: number;
            partido: number;
        };
        GolRequest: {
            /** Minuto (opcional) */
            minuto?: number | null;
            autogol?: boolean;
            jugador: number;
            partido: number;
        };
        /**
         * @description * `A` - Grupo A
         *     * `B` - Grupo B
         *     * `C` - Grupo C
         *     * `D` - Grupo D
         * @enum {string}
         */
        GrupoEnum: "A" | "B" | "C" | "D";
        Jornada: {
            readonly id: number;
            nombre: string;
            numero: number;
            /** Format: date */
            fecha?: string | null;
            activa?: boolean;
        };
        JornadaRequest: {
            nombre: string;
            numero: number;
            /** Format: date */
            fecha?: string | null;
            activa?: boolean;
        };
        Jugador: {
            readonly id: number;
            readonly equipo_nombre: string;
            readonly nombre_completo: string;
            primer_nombre: string;
            segundo_nombre?: string | null;
            primer_apellido: string;
            segundo_apellido?: string | null;
            cedula: string | null;
            /** Format: date */
            fecha_nacimiento?: string | null;
            numero_dorsal: number | null;
            posicion?: string | null;
            nivel?: (components["schemas"]["NivelEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: uri */
            foto?: string | null;
            activo_segunda_fase?: boolean;
            suspendido?: boolean;
            partidos_suspension_restantes?: number;
            /** Format: date */
            fecha_fin_suspension?: string | null;
            equipo: number;
        };
        JugadorRequest: {
            primer_nombre: string;
            segundo_nombre?: string | null;
            primer_apellido: string;
            segundo_apellido?: string | null;
            cedula: string | null;
            /** Format: date */
            fecha_nacimiento?: string | null;
            numero_dorsal: number | null;
            posicion?: string | null;
            nivel?: (components["schemas"]["NivelEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: binary */
            foto?: string | null;
            activo_segunda_fase?: boolean;
            suspendido?: boolean;
            partidos_suspension_restantes?: number;
            /** Format: date */
            fecha_fin_suspension?: string | null;
            equipo: number;
        };
        /**
         * @description * `1` - 1 - Muy bajo
         *     * `2` - 2 - Bajo
         *     * `3` - 3 - Medio
         *     * `4` - 4 - Alto
         *     * `5` - 5 - Muy alto
         * @enum {integer}
         */
        NivelEnum: 1 | 2 | 3 | 4 | 5;
        /** @enum {unknown} */
        NullEnum: null;
        PaginatedCategoriaList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Categoria"][];
        };
        PaginatedEquipoList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Equipo"][];
        };
        PaginatedGolList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Gol"][];
        };
        PaginatedJornadaList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Jornada"][];
        };
        PaginatedJugadorList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Jugador"][];
        };
        PaginatedPartidoList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Partido"][];
        };
        PaginatedTarjetaList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Tarjeta"][];
        };
        PaginatedTorneoList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Torneo"][];
        };
        Partido: {
            readonly id: number;
            readonly equipo_1_nombre: string;
            readonly equipo_2_nombre: string;
            readonly jornada_nombre: string;
            /** Format: date-time */
            fecha: string;
            cancha?: string;
            completado?: boolean;
            goles_equipo_1?: number;
            goles_equipo_2?: number;
            victoria_por_default?: components["schemas"]["VictoriaPorDefaultEnum"] | components["schemas"]["BlankEnum"];
            es_eliminatorio?: boolean;
            penales_equipo_1?: number | null;
            penales_equipo_2?: number | null;
            inasistencia_equipo_1?: boolean;
            inasistencia_equipo_2?: boolean;
            equipo_1_pago_arbitro?: boolean;
            equipo_2_pago_arbitro?: boolean;
            observaciones?: string;
            acta_firmada?: boolean;
            acta_firmada_equipo_1?: boolean;
            acta_firmada_equipo_2?: boolean;
            torneo: number;
            jornada?: number | null;
            fase_eliminatoria?: number | null;
            equipo_1: number;
            equipo_2: number;
            arbitro?: number | null;
            equipo_ganador_default?: number | null;
            equipo_pone_balon?: number | null;
        };
        PartidoDetalle: {
            readonly id: number;
            readonly equipo_1: components["schemas"]["Equipo"];
            readonly equipo_2: components["schemas"]["Equipo"];
            readonly jornada: components["schemas"]["Jornada"];
            readonly goles: components["schemas"]["Gol"][];
            readonly tarjetas: components["schemas"]["Tarjeta"][];
            /** Format: date-time */
            fecha: string;
            cancha?: string;
            completado?: boolean;
            goles_equipo_1?: number;
            goles_equipo_2?: number;
            victoria_por_default?: components["schemas"]["VictoriaPorDefaultEnum"] | components["schemas"]["BlankEnum"];
            es_eliminatorio?: boolean;
            penales_equipo_1?: number | null;
            penales_equipo_2?: number | null;
            inasistencia_equipo_1?: boolean;
            inasistencia_equipo_2?: boolean;
            equipo_1_pago_arbitro?: boolean;
            equipo_2_pago_arbitro?: boolean;
            observaciones?: string;
            acta_firmada?: boolean;
            acta_firmada_equipo_1?: boolean;
            acta_firmada_equipo_2?: boolean;
            torneo: number;
            fase_eliminatoria?: number | null;
            arbitro?: number | null;
            equipo_ganador_default?: number | null;
            equipo_pone_balon?: number | null;
        };
        PartidoRequest: {
            /** Format: date-time */
            fecha: string;
            cancha?: string;
            completado?: boolean;
            goles_equipo_1?: number;
            goles_equipo_2?: number;
            victoria_por_default?: components["schemas"]["VictoriaPorDefaultEnum"] | components["schemas"]["BlankEnum"];
            es_eliminatorio?: boolean;
            penales_equipo_1?: number | null;
            penales_equipo_2?: number | null;
            inasistencia_equipo_1?: boolean;
            inasistencia_equipo_2?: boolean;
            equipo_1_pago_arbitro?: boolean;
            equipo_2_pago_arbitro?: boolean;
            observaciones?: string;
            acta_firmada?: boolean;
            acta_firmada_equipo_1?: boolean;
            acta_firmada_equipo_2?: boolean;
            torneo: number;
            jornada?: number | null;
            fase_eliminatoria?: number | null;
            equipo_1: number;
            equipo_2: number;
            arbitro?: number | null;
            equipo_ganador_default?: number | null;
            equipo_pone_balon?: number | null;
        };
        PatchedCategoriaRequest: {
            nombre?: string;
            descripcion?: string;
            /** Format: decimal */
            premio_primero?: string | null;
            /** Format: decimal */
            premio_segundo?: string | null;
            /** Format: decimal */
            premio_tercero?: string | null;
            /** Format: decimal */
            premio_cuarto?: string | null;
            /** Format: decimal */
            costo_inscripcion?: string | null;
            /** Format: decimal */
            costo_arbitraje?: string;
            /** Format: decimal */
            multa_amarilla?: string;
            /** Format: decimal */
            multa_roja?: string;
            limite_inasistencias?: number;
            limite_amarillas_suspension?: number;
            partidos_suspension_roja?: number;
        };
        PatchedEquipoRequest: {
            nombre?: string;
            /** Format: binary */
            logo?: string | null;
            color_principal?: string;
            color_secundario?: string;
            nivel?: components["schemas"]["NivelEnum"];
            activo?: boolean;
            estado?: components["schemas"]["EstadoEnum"];
            /** Format: date-time */
            fecha_retiro?: string | null;
            grupo?: components["schemas"]["GrupoEnum"] | components["schemas"]["BlankEnum"];
            inasistencias?: number;
            excluido_por_inasistencias?: boolean;
            clasificado_fase_grupos?: boolean;
            fase_actual?: string;
            eliminado_en_fase?: string;
            categoria?: number;
            torneo?: number;
            dirigente?: number | null;
        };
        PatchedGolRequest: {
            /** Minuto (opcional) */
            minuto?: number | null;
            autogol?: boolean;
            jugador?: number;
            partido?: number;
        };
        PatchedJornadaRequest: {
            nombre?: string;
            numero?: number;
            /** Format: date */
            fecha?: string | null;
            activa?: boolean;
        };
        PatchedJugadorRequest: {
            primer_nombre?: string;
            segundo_nombre?: string | null;
            primer_apellido?: string;
            segundo_apellido?: string | null;
            cedula?: string | null;
            /** Format: date */
            fecha_nacimiento?: string | null;
            numero_dorsal?: number | null;
            posicion?: string | null;
            nivel?: (components["schemas"]["NivelEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: binary */
            foto?: string | null;
            activo_segunda_fase?: boolean;
            suspendido?: boolean;
            partidos_suspension_restantes?: number;
            /** Format: date */
            fecha_fin_suspension?: string | null;
            equipo?: number;
        };
        PatchedPartidoRequest: {
            /** Format: date-time */
            fecha?: string;
            cancha?: string;
            completado?: boolean;
            goles_equipo_1?: number;
            goles_equipo_2?: number;
            victoria_por_default?: components["schemas"]["VictoriaPorDefaultEnum"] | components["schemas"]["BlankEnum"];
            es_eliminatorio?: boolean;
            penales_equipo_1?: number | null;
            penales_equipo_2?: number | null;
            inasistencia_equipo_1?: boolean;
            inasistencia_equipo_2?: boolean;
            equipo_1_pago_arbitro?: boolean;
            equipo_2_pago_arbitro?: boolean;
            observaciones?: string;
            acta_firmada?: boolean;
            acta_firmada_equipo_1?: boolean;
            acta_firmada_equipo_2?: boolean;
            torneo?: number;
            jornada?: number | null;
            fase_eliminatoria?: number | null;
            equipo_1?: number;
            equipo_2?: number;
            arbitro?: number | null;
            equipo_ganador_default?: number | null;
            equipo_pone_balon?: number | null;
        };
        PatchedTarjetaRequest: {
            tipo?: components["schemas"]["TipoEnum"];
            pagada?: boolean;
            /** Format: date-time */
            fecha_pago?: string | null;
            suspension_cumplida?: boolean;
            minuto?: number | null;
            motivo?: string;
            jugador?: number;
            partido?: number;
        };
        PatchedTorneoRequest: {
            nombre?: string;
            /** Format: date */
            fecha_inicio?: string;
            /** Format: date */
            fecha_fin?: string | null;
            activo?: boolean;
            finalizado?: boolean;
            tiene_fase_grupos?: boolean;
            tiene_eliminacion_directa?: boolean;
            numero_grupos?: number;
            equipos_clasifican_por_grupo?: number;
            fase_actual?: components["schemas"]["FaseActualEnum"];
            categoria?: number;
        };
        TablaPosiciones: {
            grupo?: string;
            readonly equipos: components["schemas"]["EstadisticaEquipo"][];
        };
        Tarjeta: {
            readonly id: number;
            readonly jugador_nombre: string;
            readonly partido_descripcion: string;
            tipo: components["schemas"]["TipoEnum"];
            /** Format: date-time */
            readonly fecha: string;
            pagada?: boolean;
            /** Format: date-time */
            fecha_pago?: string | null;
            suspension_cumplida?: boolean;
            minuto?: number | null;
            motivo?: string;
            jugador: number;
            partido: number;
        };
        TarjetaRequest: {
            tipo: components["schemas"]["TipoEnum"];
            pagada?: boolean;
            /** Format: date-time */
            fecha_pago?: string | null;
            suspension_cumplida?: boolean;
            minuto?: number | null;
            motivo?: string;
            jugador: number;
            partido: number;
        };
        /**
         * @description * `AMARILLA` - Amarilla
         *     * `ROJA` - Roja
         * @enum {string}
         */
        TipoEnum: "AMARILLA" | "ROJA";
        TokenObtainPair: {
            readonly access: string;
            readonly refresh: string;
        };
        TokenObtainPairRequest: {
            username: string;
            password: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
        Torneo: {
            readonly id: number;
            readonly categoria_nombre: string;
            readonly total_equipos: number;
            nombre: string;
            /** Format: date */
            fecha_inicio: string;
            /** Format: date */
            fecha_fin?: string | null;
            activo?: boolean;
            finalizado?: boolean;
            tiene_fase_grupos?: boolean;
            tiene_eliminacion_directa?: boolean;
            numero_grupos?: number;
            equipos_clasifican_por_grupo?: number;
            fase_actual?: components["schemas"]["FaseActualEnum"];
            categoria: number;
        };
        TorneoDetalle: {
            readonly id: number;
            readonly categoria: components["schemas"]["Categoria"];
            readonly total_equipos: number;
            readonly total_partidos: number;
            readonly partidos_jugados: number;
            readonly partidos_pendientes: number;
            nombre: string;
            /** Format: date */
            fecha_inicio: string;
            /** Format: date */
            fecha_fin?: string | null;
            activo?: boolean;
            finalizado?: boolean;
            tiene_fase_grupos?: boolean;
            tiene_eliminacion_directa?: boolean;
            numero_grupos?: number;
            equipos_clasifican_por_grupo?: number;
            fase_actual?: components["schemas"]["FaseActualEnum"];
        };
        TorneoRequest: {
            nombre: string;
            /** Format: date */
            fecha_inicio: string;
            /** Format: date */
            fecha_fin?: string | null;
            activo?: boolean;
            finalizado?: boolean;
            tiene_fase_grupos?: boolean;
            tiene_eliminacion_directa?: boolean;
            numero_grupos?: number;
            equipos_clasifican_por_grupo?: number;
            fase_actual?: components["schemas"]["FaseActualEnum"];
            categoria: number;
        };
        /**
         * @description * `` - Normal
         *     * `retiro` - Retiro de equipo
         *     * `inasistencia` - Inasistencia
         *     * `sancion` - Sanción administrativa
         * @enum {string}
         */
        VictoriaPorDefaultEnum: "retiro" | "inasistencia" | "sancion";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    categorias_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoriaList"];
                };
            };
        };
    };
    categorias_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoriaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoriaRequest"];
                "multipart/form-data": components["schemas"]["CategoriaRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Categoria"];
                };
            };
        };
    };
    categorias_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Categoría. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Categoria"];
                };
            };
        };
    };
    categorias_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Categoría. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoriaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoriaRequest"];
                "multipart/form-data": components["schemas"]["CategoriaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Categoria"];
                };
            };
        };
    };
    categorias_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Categoría. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    categorias_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Categoría. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategoriaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategoriaRequest"];
                "multipart/form-data": components["schemas"]["PatchedCategoriaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Categoria"];
                };
            };
        };
    };
    equipos_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEquipoList"];
                };
            };
        };
    };
    equipos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EquipoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EquipoRequest"];
                "multipart/form-data": components["schemas"]["EquipoRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipo"];
                };
            };
        };
    };
    equipos_por_categoria_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipo"];
                };
            };
        };
    };
    equipos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Equipo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EquipoDetalle"];
                };
            };
        };
    };
    equipos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Equipo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EquipoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EquipoRequest"];
                "multipart/form-data": components["schemas"]["EquipoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipo"];
                };
            };
        };
    };
    equipos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Equipo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    equipos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Equipo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEquipoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEquipoRequest"];
                "multipart/form-data": components["schemas"]["PatchedEquipoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipo"];
                };
            };
        };
    };
    jugadores_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedJugadorList"];
                };
            };
        };
    };
    jugadores_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JugadorRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JugadorRequest"];
                "multipart/form-data": components["schemas"]["JugadorRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jugadores_goleadores_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jugadores_por_equipo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jugadores_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jugador. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jugadores_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jugador. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JugadorRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JugadorRequest"];
                "multipart/form-data": components["schemas"]["JugadorRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jugadores_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jugador. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    jugadores_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jugador. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedJugadorRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedJugadorRequest"];
                "multipart/form-data": components["schemas"]["PatchedJugadorRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jugador"];
                };
            };
        };
    };
    jornadas_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedJornadaList"];
                };
            };
        };
    };
    jornadas_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JornadaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JornadaRequest"];
                "multipart/form-data": components["schemas"]["JornadaRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jornada"];
                };
            };
        };
    };
    jornadas_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jornada. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jornada"];
                };
            };
        };
    };
    jornadas_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jornada. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JornadaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JornadaRequest"];
                "multipart/form-data": components["schemas"]["JornadaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jornada"];
                };
            };
        };
    };
    jornadas_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jornada. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    jornadas_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jornada. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedJornadaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedJornadaRequest"];
                "multipart/form-data": components["schemas"]["PatchedJornadaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jornada"];
                };
            };
        };
    };
    jornadas_partidos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Jornada. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jornada"];
                };
            };
        };
    };
    partidos_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPartidoList"];
                };
            };
        };
    };
    partidos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartidoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PartidoRequest"];
                "multipart/form-data": components["schemas"]["PartidoRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    partidos_por_equipo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    partidos_por_jornada_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    partidos_proximos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    partidos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Partido. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartidoDetalle"];
                };
            };
        };
    };
    partidos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Partido. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartidoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PartidoRequest"];
                "multipart/form-data": components["schemas"]["PartidoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    partidos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Partido. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    partidos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Partido. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPartidoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPartidoRequest"];
                "multipart/form-data": components["schemas"]["PatchedPartidoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Partido"];
                };
            };
        };
    };
    goles_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGolList"];
                };
            };
        };
    };
    goles_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GolRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GolRequest"];
                "multipart/form-data": components["schemas"]["GolRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gol"];
                };
            };
        };
    };
    goles_por_partido_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gol"];
                };
            };
        };
    };
    goles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gol. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gol"];
                };
            };
        };
    };
    goles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gol. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GolRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GolRequest"];
                "multipart/form-data": components["schemas"]["GolRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gol"];
                };
            };
        };
    };
    goles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gol. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    goles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gol. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGolRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGolRequest"];
                "multipart/form-data": components["schemas"]["PatchedGolRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gol"];
                };
            };
        };
    };
    tarjetas_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTarjetaList"];
                };
            };
        };
    };
    tarjetas_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TarjetaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TarjetaRequest"];
                "multipart/form-data": components["schemas"]["TarjetaRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tarjeta"];
                };
            };
        };
    };
    tarjetas_por_tipo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tarjeta"];
                };
            };
        };
    };
    tarjetas_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tarjeta. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tarjeta"];
                };
            };
        };
    };
    tarjetas_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tarjeta. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TarjetaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TarjetaRequest"];
                "multipart/form-data": components["schemas"]["TarjetaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tarjeta"];
                };
            };
        };
    };
    tarjetas_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tarjeta. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tarjetas_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tarjeta. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTarjetaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTarjetaRequest"];
                "multipart/form-data": components["schemas"]["PatchedTarjetaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tarjeta"];
                };
            };
        };
    };
    torneos_list: {
        parameters: {
            query?: {
                activo?: boolean;
                categoria?: number;
                /** @description * `inscripcion` - Inscripción
                 *     * `grupos` - Fase de Grupos
                 *     * `octavos` - Octavos de Final
                 *     * `cuartos` - Cuartos de Final
                 *     * `semifinales` - Semifinales
                 *     * `final` - Final
                 *     * `finalizado` - Finalizado */
                fase_actual?: "cuartos" | "final" | "finalizado" | "grupos" | "inscripcion" | "octavos" | "semifinales";
                finalizado?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTorneoList"];
                };
            };
        };
    };
    torneos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorneoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TorneoRequest"];
                "multipart/form-data": components["schemas"]["TorneoRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torneo"];
                };
            };
        };
    };
    torneos_activos_list: {
        parameters: {
            query?: {
                activo?: boolean;
                categoria?: number;
                /** @description * `inscripcion` - Inscripción
                 *     * `grupos` - Fase de Grupos
                 *     * `octavos` - Octavos de Final
                 *     * `cuartos` - Cuartos de Final
                 *     * `semifinales` - Semifinales
                 *     * `final` - Final
                 *     * `finalizado` - Finalizado */
                fase_actual?: "cuartos" | "final" | "finalizado" | "grupos" | "inscripcion" | "octavos" | "semifinales";
                finalizado?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTorneoList"];
                };
            };
        };
    };
    torneos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorneoDetalle"];
                };
            };
        };
    };
    torneos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorneoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TorneoRequest"];
                "multipart/form-data": components["schemas"]["TorneoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torneo"];
                };
            };
        };
    };
    torneos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    torneos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTorneoRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTorneoRequest"];
                "multipart/form-data": components["schemas"]["PatchedTorneoRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torneo"];
                };
            };
        };
    };
    torneos_estadisticas_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    torneos_jugadores_destacados_retrieve: {
        parameters: {
            query?: {
                /** @description Número máximo de jugadores a mostrar en cada categoría (por defecto: 5) */
                limite?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    torneos_tabla_posiciones_retrieve: {
        parameters: {
            query?: {
                /** @description Si es 'true', fuerza la actualización de todas las estadísticas */
                actualizar?: boolean;
                /** @description Filtrar por grupo específico (A, B, C, etc.) */
                grupo?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Torneo. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TablaPosiciones"];
                };
            };
        };
    };
    auth_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_registro_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
